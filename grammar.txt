# Parser grammar rule definitions.
# defined in order of priority with least at top.


statements      : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr            : KEYWORD:VAR IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr       : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|STRING|IDENTIFIER
                : LPAREN expr RPAREN
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr		: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYWORD:IF expr KEYWORD:THEN
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b       : KEYWORD:ELIF expr KEYWORD:THEN
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c       : KEYWORD:ELSE
                  expr
                | (NEWLINE statements KEYWORD:END)

for-expr        : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                  (KEYWORD:STEP expr)? KEYWORD:THEN
                  expr
                | (NEWLINE statements KEYWORD:END)


while-expr      : KEYWORD:WHILE expr KEYWORD:THEN
                  expr
                | (NEWLINE statements KEYWORD:END)


func-def        : KEYWORD:FUN IDENTIFIER?
                  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  (ARROW expr)
                | (NEWLINE statements KEYWORD:END)




# Grammar examples.

##############################
# Basic math statements
##############################

basic > 1 + 2
3
basic > 1 - 2
-1
basic > 1 * 2
2
basic > 1 / 2
0.5
basic > 1 ^ 2
1
basic > 2 ^ 2
4
basic > 1 + 2 * 3
7
basic > 1 + (2 * 3)
7
basic > (1 + 2 ) * 3
9


##############################
# Variables
##############################

basic > VAR a = 1
1
basic > a + 2 
3
basic > a + (VAR b = 2)
3
basic > b
2
basic > VAR c = VAR d = VAR e = 10
10
basic > c
10
basic > d
10
basic > e
10
basic > NULL
0

##############################
# Comparison operatores
##############################

basic > 5 == 5
1
basic > 6 == 4
0
basic > 2 + 8 == 5 + 5
1
basic > 1 == 1 AND 2 == 2
1
basic > 1 == 1 OR 2 == 3
1
basic > NOT 1 == 1
0
basic > 5 < 6
1
basic > 5 > 6
0
basic > 6 > 6
0
basic > 6 >= 6
1
basic > TRUE
1
basic > FALSE
0

##############################
# IF THEN ELIF ELSE Statements
##############################

basic > IF 5 == 5 THEN 123
123
basic > IF 6 == 5 THEN 123  
basic > IF 6 == 5 THEN 123 ELSE 456 
456
basic > VAR age = 19
19
basic > VAR price = IF age >= 18 THEN 40 ELSE 20
40

##############################
# FOR TO STEP WHILE Statements
##############################

basic > VAR result = 1
1
basic > FOR i = 1 TO 6 THEN VAR result = result * i 
basic > result
120

basic > VAR  result = 1
1
basic > FOR i = 5 TO 0 STEP -1 THEN VAR result = result * i
basic > result
120

basic > WHILE i < 100000 THEN VAR i = i + 1

##############################
# FUN funtion definitions and usage
##############################

basic > FUN add (a, b) -> a + b
<function add>
basic > add( 5, 6)
11      

basic > VAR some_func = add
<function add>
basic > some_func(3, 6)
9

basic > FUN (a) -> a + 6
<function <anonymous>>

basic > VAR some_func = FUN (a) -> a + 6
<function <anonymous>>
basic > some_func(12)
18

basic > FUN test(a) -> a / 0
<function test>
basic > test(123)
Traceback (most recent call last):
  File <stdin>, line 1, in <program>
  File <stdin>, line 1, in test
Runtime Error: Division by zero

FUN test(a) -> a / 0
                   ^

##############################
# STRINGS
##############################

basic > "this is a string"
"this is a string"

basic > "this is" + " a string"
"this is a string"

basic > "hello " * 3
"hello hello hello "

basic > FUN greet(person, emphasization) -> "Hello, " * emphasization + person
<function greet>
basic > greet("Rich", 3)
"Hello, Hello, Hello, Rich"

##############################
# LISTS
##############################

basic > [1,2,3,4]
[1, 2, 3, 4]

basic > [1,2,3] + 4
[1, 2, 3, 4]

basic > [1,2,3] + [4,5,6]
[1, 2, 3, [4, 5, 6]]

basic > [1,2,3]*[4,5,6]
[1, 2, 3, 4, 5, 6]

basic > [1,2,3]/0
1

basic > FOR i = 1 TO 9 THEN 2^i
[2, 4, 8, 16, 32, 64, 128, 256]

##############################
# BUILT IN FUNCTIONS
##############################

basic > MATH_PI
3.141592653589793

basic > PRINT("Hello World!")
Hello World!
0

basic > VAR name = INPUT()
Rich !!!
Rich !!!
basic > name
Rich !!!

basic > VAR age = INPUT_INT()
sdhjfg
'sdhjfg' must be an integer. Try again!
12
12
basic > age
12

basic > IS_NUM(123)
1       
basic > IS_NUM([])
0       
basic > IS_STR("abba")
1       
basic > IS_LIST([1,2,3])
1       
basic > IS_FUN(PRINT) 
1       

basic > VAR list = [1,2,3]
1, 2, 3 

basic > APPEND(list, 4)
0
basic > list
1, 2, 3, 4

basic > POP(list ,3)
4
basic > list
1, 2, 3

basic > EXTEND(list, [4,5,6])
0
basic > list
1, 2, 3, 4, 5, 6


##############################
# MUTI-LINE OPERATIONS
##############################

basic > 1 + 2; 3 + 4
3, 7

asic > VAR result = IF 5 == 5 THEN "math works" ELSE "no"
math works

basic > IF 5 == 5 THEN; PRINT("math"); PRINT("works") ELSE PRINT("broken")
math
works
0
